package com.mposluszny.jdbc.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.mposluszny.jdbc.dao.GenericDAO;
import com.mposluszny.jdbc.dao.PlayerDao;
import com.mposluszny.jdbc.model.Player;

public class PlayerDaoImpl extends GenericDAO<Player> implements PlayerDao {
	
	public PlayerDaoImpl (Connection connection) {
				
		super(connection, "Player");
		PreparedStatement preparedStatement = null;
		ResultSet rs = null;
		
		try {
			
			rs = connection.getMetaData().getTables(null, null, null, null);
			
			boolean tableExists = false;
			
			while (rs.next()) {
				
				if (tableName.equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}
			
			if (!tableExists) {
				preparedStatement =
					connection.prepareStatement("CREATE TABLE Player (idPlayer BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1) PRIMARY KEY,"
																+ " name VARCHAR (30) NOT NULL,"
																+ " surname VARCHAR(50) NOT NULL,"
																+ " ign VARCHAR(30) NOT NULL,"
																+ " role VARCHAR(10) NOT NULL,"
																+ " idTeam BIGINT FOREIGN KEY REFERENCES Team(idTeam),"
																+ " isRetired BOOLEAN DEFAULT FALSE);");
				preparedStatement.execute();
			}
			
		} catch (SQLException e) {

			e.printStackTrace();
		}
		
		finally {
			
			try {
				
				if (rs != null)
					rs.close();
				
				if (preparedStatement != null)
					preparedStatement.close();
				
			} catch (SQLException e) {

				e.printStackTrace();
			}
		}
	}
	
	@Override
	public List<Player> getAllPlayers() {
		
		Statement statement = null;
		ResultSet rs = null;
		
		try {
			
			statement = connection.createStatement();
			rs = statement.executeQuery("SELECT * FROM Player;");
			List<Player> players = new ArrayList<Player>();
			
			while (rs.next()) {
				
				Player player = new Player(rs.getString("name"),
										   rs.getString("surname"),
										   rs.getString("ign"),
										   rs.getString("role"),
										   rs.getLong("idTeam"),
										   rs.getBoolean("isRetired"));
				player.setIdPlayer(rs.getLong("idPlayer"));
				players.add(player);
			}
			
			return players;
			
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		
		finally {
			
			try {

				if (statement != null)
					statement.close();
				
				if (rs != null)
					rs.close();
				
			} catch (SQLException e) {
				
				e.printStackTrace();
			}
		}
		
		return null;
	}

	@Override
	public Player getPlayerById(long idPlayer) {
				
		Statement statement = null;
		ResultSet rs = null;
		
		try {
			
			statement = connection.createStatement();
			rs = statement.executeQuery("SELECT * FROM Player WHERE idPlayer=" + idPlayer + ";");
		
			if (rs.next()) {
				
				Player player = new Player(rs.getString("name"),
										   rs.getString("surname"),
										   rs.getString("ign"),
										   rs.getString("role"),
										   rs.getLong("idTeam"),
										   rs.getBoolean("isRetired"));
				player.setIdPlayer(rs.getLong("idPlayer"));
				
				return player;
			}
			
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		
		finally {
			
			try {
				
				if (rs != null)
					rs.close();
				
				if (statement != null)
					statement.close();
				
			} catch (SQLException e) {
				
				e.printStackTrace();
			}
		}
		
		return null;
	}

	@Override
	public void updatePlayer(Player player) {

		PreparedStatement preparedStatement = null;
		
		try {
			
			preparedStatement = connection.prepareStatement(
											"UPDATE Player SET name=\'" + player.getName() + "\'" +
															  "surname=\'" + player.getSurname() + "\'" +
															  "ign=\'" + player.getIgn() + "\'" +
															  "role=\'" + player.getRole() + "\'" +
															  "idTeam\'" + player.getIdTeam() + "\'" +
															  "isRetired=\'" + player.isRetired() + "\'" +
															  "WHERE idPlayer=" + player.getIdPlayer() + ";");
			preparedStatement.execute();
			
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		
		finally {
			
			try {
				
				if (preparedStatement != null)
					preparedStatement.close();
				
			} catch (SQLException e) {

				e.printStackTrace();
			}
			
		}

	}

	@Override
	public void addPlayer(Player player) {

		PreparedStatement preparedStatement = null;
		
		try {
			
			String query = String.format("INSERT INTO Player (NAME, SURNAME, IGN, ROLE, IDTEAM, ISRETIRED)"
										+ " VALUES (\'%s\', \'%s\', \'%s\', \'%s\', %s, %b);", player.getName(), player.getSurname(),
										player.getIgn(), player.getRole(), (player.getIdTeam() == 0L ? "null" : String.valueOf(player.getIdTeam())), player.isRetired());
			preparedStatement = 
					connection.prepareStatement(query);
			preparedStatement.execute();
			
		} catch (SQLException e) {

			e.printStackTrace();
			
		}
		
		finally {
			
			try {
				
				if (preparedStatement != null)
					preparedStatement.close();
				
			} catch (SQLException e) {

				e.printStackTrace();
				
			}
		}
		
	}
	

	@Override
	public void deletePlayer(Player player) {

		PreparedStatement preparedStatement = null;
		
		try {
			
			preparedStatement = connection.prepareStatement(String.format("DELETE FROM Player WHERE idPlayer=%d", player.getIdPlayer()));
			preparedStatement.execute();
			
		} catch (SQLException e) {

			e.printStackTrace();
			
		}
		
		finally {
			
			try {
				
				if (preparedStatement != null)
					preparedStatement.close();
				
			} catch (SQLException e) {

				e.printStackTrace();
				
			}
		}
	}

	@Override
	public int count() throws SQLException {
		// TODO Auto-generated method stub
		return 0;
	}
}